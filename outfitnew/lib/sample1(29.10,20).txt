import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:sampleproject/cart.dart';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

class SingleproductPage extends StatefulWidget {
  //String productprice;
  String productname, productimage, productlongdesc, producttype, productprice;
  String productid;

  @override
  SingleproductPage({
    this.productprice,
    this.productimage,
    this.productname,
    this.productlongdesc,
    this.productid,
    this.producttype,
  });
  @override
  _SingleproductPageState createState() => _SingleproductPageState();
}

class _SingleproductPageState extends State<SingleproductPage> {
  final formKey = GlobalKey<FormState>();
  bool _validate = false;
  final scaffoldkey = GlobalKey<ScaffoldState>();

  static const String imageURL = "https://w3cert.net/outfit/";
  SharedPreferences sharedPreferences;
  int len, len1, optionIndex, optionvalueIndex;
  int qty = 1;
  List dropDownValues = [];
  //dynamic data = [];
  dynamic data = "";
  List drop_data = List();
  //List<Map> options= [];
  List data2 = List();

  List data1 = List();
  String selectedSalutation;
  String _dropDownValue;
  bool displayaddtocart = false;
  // String _dropDownValue1;
  // String dropdownValuecolor, dropdownValuesize;
  String cart_id;
  //dynamic data1;

  List option_value1 = List();
  dynamic option_value = [];
  List selected_ddvalue = [];
  int i;
  int k;
  var _value;
  int t;
  bool visibledropdown = false;
  bool visibleflexdropdown = false;
  var list = new List();
  //List<Map> _myJson = [];
  Map<String, dynamic> map;
  // Map<String, dynamic> data3;
  String msg = "";
  checkproducttype() {
    print(widget.producttype);

    if (widget.producttype == 'simple') {
      setState(() {
        displayaddtocart = true;
      });
    } else if (widget.producttype == 'variable') {
      setState(() {
        displayaddtocart = true;
      });
    } else if (widget.producttype == 'configarable') {
    } else if (widget.producttype == 'flexivariable') {}
  }

  Future checkvarient(i) async {
    print("inside check varient");
    print("qty" + qty.toString());
    print("pid" + widget.productid.toString());
    print("select id");
    print("dropdownvalue[i]");
    print(dropDownValues[i]);
    //  print(dropDownValues.toString());
    List index = new List();
    var id;
    for (k = 0; k < data['data']['product']['options'].length; k++) {
      id = data['data']['product']['options'][k]['productoption_id'];
      index.add(id);
      print(index);
      // print(index[i]);
      print("k value" + k.toString());
    }
    Map newMap = {};
    int j;
    for (k = 0; k < data['data']['product']['options'].length; k++) {
      newMap["product_option[${index[k]}]"] = dropDownValues[k].toString();
    }
    /*for (j = 0; j < data['data']['product']['options'].length; j++) {
      //dropDownValues[k] = dropDownValues[k].toString();
      print(dropDownValues[k]);
    }*/
print("new map");
    print(newMap);
    /*     "http://w3cert.net/outfit/index.php/en/?option=com_j2store&
     view=product&task=update&
     product_option[18]=1&product_option[19]=3&
     product_qty=$quty&product_id=$pid&option=com_j2store&ajax=1&cfe93d81c3fbe682d5e2f12acdaff1b6=1&product_id=$pid&_=160334299430");
*/
    print(dropDownValues[k]);
    //print(["product_option[${index[k]}]"]);
    var quty = qty.toString();
    var pid = widget.productid;

    //product_option[18]=1&product_option[19]=3
    final response = await http.get("http://w3cert.net/outfit/index.php/en/?option=com_j2store&view=product&task=update&$newMap&product_qty=$quty&product_id=$pid&option=com_j2store&ajax=1&cfe93d81c3fbe682d5e2f12acdaff1b6=1&product_id=$pid&_=160334299430");
/*

       urll crct   final response = await http.get("http://w3cert.net/outfit/index.php/en/?option=com_j2store&view=product&task=update&product_option[18]=1&product_option[19]=3&product_qty=$quty&product_id=$pid&option=com_j2store&ajax=1&cfe93d81c3fbe682d5e2f12acdaff1b6=1&product_id=$pid&_=160334299430");
      */

    /* 
     //crct url
http://w3cert.net/outfit/index.php/en/?option=com_j2store&view=product&task=update&product_option[18]=1&product_option[19]=3&product_qty=$quty&product_id=$pid&option=com_j2store&ajax=1&cfe93d81c3fbe682d5e2f12acdaff1b6=1&product_id=$pid&_=160334299430");

     //finish
       "http://w3cert.net/outfit/index.php/en/?
     option=com_j2store&view=product&task=update&
     product_option[18]=1&product_option[19]=3&product_qty=$quty&product_id=$pid&option=com_j2store&ajax=1&cfe93d81c3fbe682d5e2f12acdaff1b6=1&product_id=$pid&_=160334299430");
   {product_option[18]: 38, product_option[19]: 41}
   https://w3cert.net/outfit/index.php/en/?option=com_j2store&view=product&task=update&
   product_option%5B18%5D=2&product_option%5B19%5D=4&product_qty=1&product_id=26&option=com_j2store&
   ajax=0&69bf034646f1cbb861eb695301d85af5=1&product_id=26&_=1603797728295

   
   */

    if (response.statusCode == 200) {
      print('response.body:' + response.body);
      //print(object);
      data = json.decode(response.body);
      print(data);
      var data1 = data['error'];
      //print(data1);
      //  print("error" + data['error']);
      msg = data['error'];
      if (msg != "Variant not available") {
        print("inside if Variant available");
        setState(() {
          displayaddtocart = true;
          msg = "varient available";
        });
      } else {
        setState(() {
          msg = data['error'];
          print("msg" + msg);
        });
      }
      // await Future.delayed(Duration(seconds: 2));
      /* if (data1 == "Variant not available") {
        print("inside if Variant not available");
        setState(() {
          msg = data['error'];
          print("msg" + msg);
        });
      } else {
        print("inside else");
        setState(() {
          displayaddtocart = true;
        });
      }*/

      //  return data;
    } else {
      // If that call was not successful, throw an error.
      throw Exception('Failed to load post');
    }
  }

  /*
    http://w3cert.net/outfit/index.php/en/component/j2store/carts/addItem?Itemid=192
    */

  Future checkproducttypeinsertproduct() {
    print("checkproducttypeinsertproduct");

    if (widget.producttype == "flexivariable") {
      print(widget.producttype);

      insertflexivariableproduct(i);
    } else if (widget.producttype == "variable") {
      insertvariableproduct(i);
    }
/*  else if(widget.producttype == "configarable")
{
 
}*/
    else if (widget.producttype == "simple") {
      print(widget.producttype);
      insertsimpleproduct();
    }
  }

  // Future<http.Request> getProduct() async {
  Future getProduct() async {
    print('Inside getProduct');
    print(widget.productid);
    final response = await http.get(
        "http://w3cert.net/outfit/index.php/api/v1/product/${widget.productid}");
    if (response.statusCode == 200) {
      print('response.body:' + response.body);
      this.setState(() {
        data = json.decode(response.body);
      });

      if (widget.producttype == "variable") {
        print("variable");
        map = json.decode(response.body);
        for (k = 0; k < data['data']['product']['options'].length; k++) {
          if (data['data']['product']['options'][k]['type'] == "select") {
            print("type is select");
            print(data['data']['product']['options'][k]['optionvalue'].length);
            print(data['data']['product']['options'][k]['productoption_id']);
            setState(() {
              visibledropdown = true;
              data2 = map['data']['product']['options'];
              // options = map['data']['product'];
              len1 =
                  data['data']['product']['options'][k]['optionvalue'].length;
              len = data['data']['product']['options'].length;
              for (int i = 0; i < data2.length; i++) {
                dropDownValues
                    .add(data2[i]['optionvalue'][i]['product_optionvalue_id']);
              }
            });
          } else {
            print("other type");
            setState(() {
              visibledropdown = false;
            });
          }
        }
      } else if (widget.producttype == "flexivariable") {
        print(" getting product inside else if flexivariable product");
        print("product type" + widget.producttype);
      /*  map = json.decode(response.body);
        for (k = 0; k < data['data']['product']['options'].length; k++) {
          if (data['data']['product']['options'][k]['type'] == "select") {
            print("type is select");
            setState(() {
              data2 = map['data']['product']['options'];
              print(data2);
                 for (int i = 0; i < data2.length; i++) {
                dropDownValues.add(data2[i]['optionvalue'][i]['optionvalue_id']);
                    print(dropDownValues[i]);
                    print(data2[i]['optionvalue'][i]['optionvalue_id']);
                    
                  }
                     // print(data2[i]['optionvalue']);
                                visibleflexdropdown = true;

            });
          } else {
            print("not select type");
            setState(() {
              visibledropdown = false;
            });
          }
        }
            map = json.decode(response.body);
        for (k = 0; k < data['data']['product']['options'].length; k++) {
          if (data['data']['product']['options'][k]['type'] == "select") {
            print("type is select");
            print(data['data']['product']['options'][k]['optionvalue'].length);
            print(data['data']['product']['options'][k]['productoption_id']);
            setState(() {
              visibleflexdropdown = true;
              data2 = map['data']['product']['options'];
              // options = map['data']['product'];
              len1 =
                  data['data']['product']['options'][k]['optionvalue'].length;
              len = data['data']['product']['options'].length;
              for (int i = 0; i < data2.length; i++) {
               // dropDownValues.add(data2[i]['optionvalue'][i]['product_optionvalue_id']);
                   dropDownValues.add(data2[i]['optionvalue'][i]['optionvalue_id']);
                    //optionvalue_id
              }
            });*/
                 map = json.decode(response.body);
        for (k = 0; k < data['data']['product']['options'].length; k++) {
          if (data['data']['product']['options'][k]['type'] == "select") {
            print("type is select");
            print(data['data']['product']['options'][k]['optionvalue'].length);
            print(data['data']['product']['options'][k]['productoption_id']);
            setState(() {
              visibleflexdropdown = true;
              data2 = map['data']['product']['options'];
              // options = map['data']['product'];
              print(data2);
              len1 =
                  data['data']['product']['options'][k]['optionvalue'].length;
              len = data['data']['product']['options'].length;
              for (int i = 0; i < data2.length; i++) {
            dropDownValues.add(data2[i]['optionvalue'][i]['product_optionvalue_id']);
                //   dropDownValues.add(data2[i]['optionvalue'][i]['optionvalue_id']);
                    //optionvalue_id
                      print("dropDownValues[i]");
                    print(dropDownValues[i]);
              }

            });
          } else {
            print("other type");
            setState(() {
              visibleflexdropdown = false;
            });
          }
        }
      } else {
        print("check product type inside else simple product");

        print("product type" + widget.producttype);

        setState(() {
          visibledropdown = false;
        });
      }
      return json.decode(response.body);
//return map;

    } else {
      // If that call was not successful, throw an error.
      throw Exception('Failed to load post');
    }
  }

//variant_id
  Future<String> insertflexivariableproduct(i) async {
    print(i);
    print("inside insertflexivariableproduct func");
    print("qty" + qty.toString());
    print("pid" + widget.productid.toString());
    print("select id");
    print(dropDownValues.toString());
    var id;
    sharedPreferences = await SharedPreferences.getInstance();
    cart_id = sharedPreferences.getString("cartid") ?? "_";
    List index = new List();
    for (k = 0; k < data['data']['product']['options'].length; k++) {
      id = data['data']['product']['options'][k]['productoption_id'];
      index.add(id);
      print(index);
      // print(index[i]);
      print("k value" + k.toString());
    }

    // if (widget.producttype == "variable") {
    print("flexi variable prodct");
    if (cart_id == "_") {
      print("cart_id is null");

      Map payload = {};

      Map newMap = {};
      for (k = 0; k < data['data']['product']['options'].length; k++) {
       // newMap["product_option[${index[k]}]"] = dropDownValues[k].toString();
       newMap = {   "product_option[18]": "1",
"product_option[19]": "3"};
      
      }
      print(newMap);
      // {product_option[18]: 38, product_option[19]: 41}

      payload = {
        "product_id": widget.productid.toString(),
        "product_qty": qty.toString(),
        "cart_id": "",
        "variant_id": "58",
//"product_option[18]": "1",
//"product_option[19]": "3"
      };
      payload.addAll(newMap);
      print(payload);
      final response = await http.post(
        "https://w3cert.net/outfit/index.php/api/v1/cart",
        body: payload,
      );

      print('response.body' + response.body);
      this.setState(() {
        data = json.decode(response.body);
      });
      print(data);
      sharedPreferences = await SharedPreferences.getInstance();
      setState(() {
        sharedPreferences.setString("cartid", data["cart_id"].toString());
        //sharedPreferences.commit();
      });
      //  });
     // navigate1();
    } else {
      print("cart_id have value");

      sharedPreferences = await SharedPreferences.getInstance();

      Map payload = {};
      //  List payload = [];
      Map list1 = {};
      Map newMap = {};
      for (k = 0; k < data['data']['product']['options'].length; k++) {
        // id = data['data']['product']['options'][k]['product_optionvalue_id'];
      //  newMap["product_option[${index[k]}]"] = dropDownValues[k].toString();
        //     print(k);
newMap = {   "product_option[18]": "1",
"product_option[19]": "3"};
      }
      payload = {
        "product_id": widget.productid.toString(),
        "product_qty": qty.toString(),
        "cart_id": sharedPreferences.getString("cartid").toString(),
        "variant_id": "58",
       // "product_option[18]": "1",
//"product_option[19]": "3"
      };
    payload.addAll(newMap);
      print(payload);
      final response = await http.post(
        "https://w3cert.net/outfit/index.php/api/v1/cart",
        body: payload,
      );
      print('response.body' + response.body);
      this.setState(() {
        data = json.decode(response.body);
      });
      // print( "product_option[$id]" );
      print(data);
      //  print( "product_option[$id]" )
      sharedPreferences = await SharedPreferences.getInstance();
      setState(() {
        sharedPreferences.setString("cartid", data["cart_id"].toString());
        //sharedPreferences.commit();
      });
      // });
// }
      navigate1();
    }
  }

  Future<String> insertvariableproduct(i) async {
    print(i);
    print("inside insertvariableproduct func");
    print("qty" + qty.toString());
    print("pid" + widget.productid.toString());
    print("select id");
    print(dropDownValues.toString());
    var id;
    sharedPreferences = await SharedPreferences.getInstance();
    cart_id = sharedPreferences.getString("cartid") ?? "_";
    List index = new List();
    for (k = 0; k < data['data']['product']['options'].length; k++) {
      id = data['data']['product']['options'][k]['productoption_id'];
      index.add(id);
      print(index);
      // print(index[i]);
      print("k value" + k.toString());
    }

    // if (widget.producttype == "variable") {
    print("variable prodct");
    if (cart_id == "_") {
      print("cart_id is null");

      Map payload = {};

      Map newMap = {};
      for (k = 0; k < data['data']['product']['options'].length; k++) {
        newMap["product_option[${index[k]}]"] = dropDownValues[k].toString();
      }
      payload = {
        "product_id": widget.productid.toString(),
        "product_qty": qty.toString(),
        "cart_id": "",
      };
      payload.addAll(newMap);
      print(payload);
      final response = await http.post(
        "https://w3cert.net/outfit/index.php/api/v1/cart",
        body: payload,
      );

      print('response.body' + response.body);
      this.setState(() {
        data = json.decode(response.body);
      });
      print(data);
      sharedPreferences = await SharedPreferences.getInstance();
      setState(() {
        sharedPreferences.setString("cartid", data["cart_id"].toString());
        //sharedPreferences.commit();
      });
      //  });
      navigate1();
    } else {
      print("cart_id have value");

      sharedPreferences = await SharedPreferences.getInstance();

      Map payload = {};
      //  List payload = [];
      Map list1 = {};
      Map newMap = {};
      for (k = 0; k < data['data']['product']['options'].length; k++) {
        // id = data['data']['product']['options'][k]['product_optionvalue_id'];
        newMap["product_option[${index[k]}]"] = dropDownValues[k].toString();
        //     print(k);

      }
      payload = {
        "product_id": widget.productid.toString(),
        "product_qty": qty.toString(),
        "cart_id": sharedPreferences.getString("cartid").toString(),
      };
      payload.addAll(newMap);
      print(payload);
      final response = await http.post(
        "https://w3cert.net/outfit/index.php/api/v1/cart",
        body: payload,
      );
      print('response.body' + response.body);
      this.setState(() {
        data = json.decode(response.body);
      });
      // print( "product_option[$id]" );
      print(data);
      //  print( "product_option[$id]" )
      sharedPreferences = await SharedPreferences.getInstance();
      setState(() {
        sharedPreferences.setString("cartid", data["cart_id"].toString());
        //sharedPreferences.commit();
      });
      // });
// }
      navigate1();
    }
  }

  Future insertsimpleproduct() async {
    //simple product
    print("inside insertsimpleproduct");
    print(widget.producttype);
    print("simple product");
    if (cart_id == "_") {
      print("cart_id is null");

      final response = await http
          .post("https://w3cert.net/outfit/index.php/api/v1/cart", body: {
        'product_id': widget.productid.toString(),
        'product_qty': qty.toString(),
        'cart_id': ""
      }); //.whenComplete(() => navigate());
      print('response.body' + response.body);
      this.setState(() {
        data = json.decode(response.body);
      });
      print(data);
      sharedPreferences = await SharedPreferences.getInstance();
      setState(() {
        sharedPreferences.setString("cartid", data["cart_id"].toString());
        //sharedPreferences.commit();
      });
      navigate1();
    } else {
      print("cart_id have value");
      sharedPreferences = await SharedPreferences.getInstance();
      print(
        sharedPreferences.getString("cartid").toString(),
      );
      final response = await http
          .post("https://w3cert.net/outfit/index.php/api/v1/cart", body: {
        'product_id': widget.productid.toString(),
        'product_qty': qty.toString(),
        'cart_id': sharedPreferences.getString("cartid").toString(),
      });
      print('response.body' + response.body);
      this.setState(() {
        data = json.decode(response.body);
      });
      print(data);

      navigate1(); //rm yds
    } //sproduc
  }

  getlocalstorage() async {
    print("inside getlocalstorage");
    sharedPreferences = await SharedPreferences.getInstance();
    cart_id = sharedPreferences.getString("cartid").toString();
    print(cart_id);
  }

  navigate1() async {
    Navigator.of(context).push(new MaterialPageRoute(
      builder: (BuildContext context) => new Cart(),
    ));
  }

  Future a;
  bool _autovalidate =true;
  void initState() {
    checkproducttype();
    a = getProduct();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: scaffoldkey,
      body: Container(
        child: SingleChildScrollView(
          child: FutureBuilder(
            //child: FutureBuilder(
            future: a,
         // future: getProduct(),
         builder: (BuildContext context, AsyncSnapshot snapshot) {
//         builder: (BuildContext context, AsyncSnapshot<List<Event>> snapshot) {

           // builder: (context, snapshot) {
              if (snapshot.hasError) print(snapshot.error);
          print("snapshot.hasData");
            print(snapshot.hasData);
              print(snapshot.data);
              return snapshot.hasData

                  /*? new ItemList(
                      list: snapshot.data,  
                    )*/
                  ? Container(
                      child: new Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        //   crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: <Widget>[
                          Center(
                            child: Form(
                              key: formKey,
                                      autovalidate: _validate,

                              child: new Container(
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: <Widget>[
                                    SizedBox(
                                      height: 50.0,
                                    ),
                                    Image.network(
                                      imageURL + widget.productimage,
                                      //'${data['data']['products'][index]['main_image']}',
                                      width: 500.0,
                                      height: 300.0,
                                    ),
                                    SizedBox(
                                      height: 20.0,
                                    ),
                                    Visibility(
                                      child: Column(children: [
                                        Container(
                                          width: 200.0,
                                          child: Column(
                                            children: [
                                              Column(children: [
                                                for (i = 0;
                                                    i < data2.length;
                                                    i++)
                                                  Column(
                                                    children: [
                                                      Text(data2[i]
                                                          ['option_name']),
                                                      //getDropDown(options[i]['optionvalue'])

                                                      DropdownButtonFormField<
                                                              String>(
                                                          //   value: optionValue1 != null ? optionValue1 : null,
                                                          //DropdownButton(
                                                          items: data2[i][
                                                                  'optionvalue']
                                                              .map<
                                                                      DropdownMenuItem<
                                                                          String>>(
                                                                  (optionValue1) {
                                                                     _value = optionValue1['optionvalue_id'].toString();
                                           print("_value"+_value);
                                                            return DropdownMenuItem<
                                                                String>(
                                                             // child: Text(_value),
                                                              child:Text(optionValue1['optionvalue_name']),
                                                           //value: null,
                                                          value:optionValue1['optionvalue_id'],
                                                      // value: optionValue1['product_optionvalue_id'],
                                                             //     value:_value,
                                                             
                                                            );
                                                          }).toList(),
                                                         /* validator:
                                                              (String value) {
                                                            if (value
                                                                    ?.isEmpty ??
                                                                true) {
                                                              return 'Please ${data2[i]['option_name']}';
                                                            }
                                                            return null;
                                                          },*/
                                                        //  value: dropDownValues[i],
                                                         //value: _value,
                                                         onChanged: (salutation) =>
                  setState(() =>  dropDownValues[i] = _value),
              validator: (value) => value == null ? 'field required' : null,
                                                         /* onChanged:
                                                              (newValue) {
                                                                            /*  validator: (value) => value == null ? 'field required' : null;

                                                                  if (formKey.currentState.validate()) {
                  //form is valid, proceed further
                  formKey.currentState.save();//save once fields are valid, onSaved method invoked for every form fields

                } else {
                  setState(() {
                    _autovalidate = true; //enable realtime validation
                  });
                }*/
            
              
                                                            print("newValue" +newValue);
                                                            
                                                          //  print("selected dropDownValues value"+dropDownValues[i]);
                                                            setState(() {
                                                             // checkvarient(i);
                                                              //dropDownValues[i] = newValue;
                                                               dropDownValues[i] = _value;
                                                               print(dropDownValues[i]);
                                                            });

                                                            // print(dropDownValues[i]);
                                                          }*/
                                                          )
                                                    ],
                                                  )
                                              ]),
                                              // _actionDropDown(data2[i]('optionvalue'))
                                            ],
                                          ),
                                          
                                        ),
                                           SizedBox(
                                                  height: 20.0,
                                                ),
                                                Text(
                                                  msg,
                                                  style: new TextStyle(
                                                    fontSize: 13.0,
                                                    color: Colors.red,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                SizedBox(
                                                  height: 20.0,
                                                ),
                                      ]),
                                      visible: visibleflexdropdown,
                                    ),
                                         /*   DropdownButtonFormField<String>(
              value: selectedSalutation,
              hint: Text(
                'Salutation',
              ),
              onChanged: (salutation) =>
              
                  setState(() => selectedSalutation = salutation),
              validator: (value) => value == null ? 'field required' : null,
              items:
                  ['MR.', 'MS.'].map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),*/
                                      Visibility(
                                      child: Column(children: [
                                        Container(
                                          width: 200.0,
                                          child: Column(
                                            children: [
                                              Column(children: [
                                                for (i = 0;
                                                    i < data2.length;
                                                    i++)
                                                  Column(
                                                    children: [
                                                      Text(data2[i]
                                                          ['option_name']),
                                                      //getDropDown(options[i]['optionvalue'])

                                                      DropdownButtonFormField<
                                                              String>(
                                                          //   value: optionValue1 != null ? optionValue1 : null,
                                                          //DropdownButton(
                                                          items: data2[i][
                                                                  'optionvalue']
                                                              .map<
                                                                      DropdownMenuItem<
                                                                          String>>(
                                                                  (optionValue1) {
                                                            return DropdownMenuItem<
                                                                String>(
                                                              child: Text(
                                                                  optionValue1[
                                                                      'optionvalue_name']),
                                                            
                                                              value: optionValue1[
                                                                  'product_optionvalue_id'],
                                                             
                                                            );
                                                          }).toList(),
                                                          validator:
                                                              (String value) {
                                                            if (value
                                                                    ?.isEmpty ??
                                                                true) {
                                                              return 'Please ${data2[i]['option_name']}';
                                                            }
                                                            return null;
                                                          },
                                                          value: dropDownValues[i],
                                                          onChanged:
                                                              (newValue) {
                                                            print("newValue" +
                                                                newValue);
                                                            //print("selected dropDownValues value"+selected_ddvalue[i]);
                                                            setState(() {
                                                              dropDownValues[
                                                                  i] = newValue;
                                                              selected_ddvalue[
                                                                  i] = newValue;
                                                            });
                                                            // print(dropDownValues[i]);
                                                          })
                                                    ],
                                                  )
                                              ]),
                                              // _actionDropDown(data2[i]('optionvalue'))
                                            ],
                                          ),
                                        )
                                      ]),
                                      visible: visibledropdown,
                                    ),
                                /*    Visibility(
                                      child: Column(children: [
                                        Container(
                                          width: 200.0,
                                          child: Column(
                                            children: [
                                              Column(children: [
                                                for (i = 0;
                                                    i < data2.length;
                                                    i++)
                                                  Column(
                                                    children: [
                                                      Text(data2[i]
                                                          ['option_name']),
                                                      //getDropDown(options[i]['optionvalue'])

                                                      DropdownButtonFormField<
                                                              String>(
                                                          //   value: optionValue1 != null ? optionValue1 : null,
                                                          //DropdownButton(
                                                          items: data2[i][
                                                                  'optionvalue']
                                                              .map<
                                                                      DropdownMenuItem<
                                                                          String>>(
                                                                  (optionValue1) {
                                                            return DropdownMenuItem<
                                                                String>(
                                                              child: Text(
                                                                  optionValue1[
                                                                      'optionvalue_name']),
                                                            
                                                              value: optionValue1[
                                                                  'product_optionvalue_id'],
                                                             
                                                            );
                                                          }).toList(),
                                                          validator:
                                                              (String value) {
                                                            if (value
                                                                    ?.isEmpty ??
                                                                true) {
                                                              return 'Please ${data2[i]['option_name']}';
                                                            }
                                                            return null;
                                                          },
                                                          value: dropDownValues[i],
                                                          onChanged:
                                                              (newValue) {
                                                            print("newValue" +
                                                                newValue);
                                                            //print("selected dropDownValues value"+selected_ddvalue[i]);
                                                            setState(() {
                                                              dropDownValues[
                                                                  i] = newValue;
                                                              selected_ddvalue[
                                                                  i] = newValue;
                                                            });
                                                            // print(dropDownValues[i]);
                                                          })
                                                    ],
                                                  )
                                              ]),
                                              // _actionDropDown(data2[i]('optionvalue'))
                                            ],
                                          ),
                                        )
                                      ]),
                                      visible: visibleflexdropdown,
                                    ),*/
                                    /*  Visibility(
                                      child: Column(children: [
                                        Container(
                                          width: 200.0,
                                          child: Column(
                                            children: [
                                              Column(children: [
                                                for (i = 0;
                                                    i < data2.length;
                                                    i++)
                                                  Column(
                                                    children: [
                                                      Text(data2[i]
                                                          ['option_name']),
                                                      //getDropDown(options[i]['optionvalue'])

                                                      DropdownButtonFormField<
                                                              String>(
                                                               
                                                          //   value: optionValue1 != null ? optionValue1 : null,
                                                          //DropdownButton(
                                                          items: data2[i][
                                                                  'optionvalue']
                                                              .map<
                                                                      DropdownMenuItem<
                                                                          String>>(
                                                                  (optionValue1) {
                                                                      _value = optionValue1['optionvalue_id'][i].toString();
                                           print("_value"+_value);
                                                            return DropdownMenuItem<
                                                                String>(
                                                              child: Text(
                                                                  optionValue1[
                                                                      'optionvalue_name']),
                                                           // value:null,
                                                          // value: _value,
                                                              value: optionValue1['product_optionvalue_id'],
                                                          //value: optionValue1['optionvalue_id'],
                                                            );
                                                          }).toList(),
                                                          validator:
                                                              (String value) {
                                                            if (value
                                                                    ?.isEmpty ??
                                                                true) {
                                                              return 'Please ${data2[i]['option_name']}';
                                                            }
                                                            return null;
                                                          },
                                                      // value: dropDownValues[i],
                                                      value: _value,
                                                          onChanged:
                                                              (newValue) {
                                                            print("newValue" +
                                                                newValue);
                                                            //print("selected dropDownValues value"+selected_ddvalue[i]);
                                                            setState(() {
                                                              checkvarient();
                                                              dropDownValues[
                                                                  i] = newValue;
                                                              /*selected_ddvalue[
                                                                  i] = newValue;*/
                                                            });
                                                            // print(dropDownValues[i]);
                                                          })
                                                    ],
                                                  )
                                              ]),
                                              // _actionDropDown(data2[i]('optionvalue'))
                                            ],
                                          ),
                                        )
                                      ]),
                                      visible: visibleflexdropdown,
                                    ),*/
                                      /*Visibility(
                                      child: Column(children: [
                                        Container(
                                          width: 200.0,
                                          child: Column(
                                            children: [
                                              Column(children: [
                                                for (i = 0; i < data2.length; i++)
                                                  Column(
                                                    children: [
                                                      Text(data2[i]['option_name']),
                                                       SizedBox(height:20.0),
                                                      DropdownButtonFormField<String>(
                                                       
                                                          items: data2[i]['optionvalue']
                                                              .map<
                                                                      DropdownMenuItem<
                                                                          String>>(
                                                                  (optionValue1) {
                                                                    print(data2[i]['optionvalue']);
                                                            return DropdownMenuItem<
                                                                String>(
                                                              child: Text(
                                                                  optionValue1['optionvalue_name']),
                                                              
                                                                // value: optionValue1['optionvalue_id'],
                                                                 value:optionValue1['product_optionvalue_id'],
                                                            );
                                                          }).toList(),
                                                          validator:
                                                              (String value) {
                                                            if (value
                                                                    ?.isEmpty ??
                                                                true) {
                                                              return 'Please ${data2[i]['option_name']}';
                                                            }
                                                            return null;
                                                          },
                                                         value: dropDownValues[i],
                                                          onChanged:
                                                              (newValue) {
                                                            print("newValue" +
                                                                newValue);
                                                            setState(() {
                                                              checkvarient();
                                                              dropDownValues[i] = newValue;
                                                         
                                                            });
                                                            
                                                            print(dropDownValues[i]);
                                                          }
                                                          
                                                          )
                                                          
                                                    ],
                                                  )
                                              ]),
                                                  SizedBox(
                                                  height: 20.0,
                                                ),
                                                Text(
                                                  msg,
                                                  style: new TextStyle(
                                                    fontSize: 13.0,
                                                    color: Colors.red,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                SizedBox(
                                                  height: 20.0,
                                                ),
                                            ],
                                          ),

                                        )
                                      ]),
                                      visible: visibleflexdropdown,
                                    ),*/
                                   /* Visibility(
                                      child: Column(children: [
                                        Container(
                                          width: 200.0,
                                          child: Column(
                                            children: [
                                              Column(children: [
                                                for (i = 0;
                                                    i < data2.length;
                                                    i++)
                                                  Column(
                                                    children: [
                                                      Text(data2[i]
                                                          ['option_name']),
                                                      DropdownButtonFormField<
                                                              String>(
                                                          items: data2[i][
                                                                  'optionvalue']
                                                              .map<
                                                                      DropdownMenuItem<
                                                                          String>>(
                                                                  (optionValue1) {
                                                                    print(dropDownValues[i]);
                                                                    print(optionValue1);
                                                            return DropdownMenuItem<
                                                                String>(
                                                              child: Text(
                                                                  optionValue1[
                                                                      'optionvalue_name']),
                                                               value: optionValue1['optionvalue_id'],
                                                            );
                                                          }).toList(),
                                                          validator:
                                                              (String value) {
                                                            if (value
                                                                    ?.isEmpty ??
                                                                true) {
                                                              return 'Please ${data2[i]['option_name']}';
                                                            }
                                                            return null;
                                                          },
                                                          value: dropDownValues[i], //rmyds
                                                          onChanged:
                                                              (newValue) {
                                                                print(newValue);
                                                            setState(() {
                                                              checkvarient();
                                                              dropDownValues[i] =
                                                                  newValue; //rm cmd
                                                              //selected_ddvalue[i] = newValue; //rm cmd
                                                            });
                                                            // print(dropDownValues[i]);
                                                          }),
                                                    ],
                                                  ),
                                                SizedBox(
                                                  height: 20.0,
                                                ),
                                                Text(
                                                  msg,
                                                  style: new TextStyle(
                                                    fontSize: 13.0,
                                                    color: Colors.red,
                                                    fontWeight: FontWeight.bold,
                                                  ),
                                                ),
                                                SizedBox(
                                                  height: 20.0,
                                                ),
                                                // Text("hai"),
                                              ]),
                                            ],
                                          ),
                                        )
                                      ]),
                                      visible: visibleflexdropdown,
                                    ),*/
                                    Row(
                                      children: <Widget>[
                                        Expanded(
                                          //  flex: 10,
                                          child: Text(
                                            //    "divya",
                                            //map['data']['product']['options']
                                                "Name : " + "${map['data']['product']['product_name']}",
                                          //  "Name : " + "${data['data']['product']['product_name']}",
                                            //  "Name : " "${data['data']['product']['product_name']}",
//"Name : " +"${data['data']['product']['options']['productoption_id']}",
                                            textAlign: TextAlign.start,
                                            style: new TextStyle(
                                              fontSize: 18.0,
                                              color: Colors.black,
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                        )
                                      ],
                                    ),
                                    SizedBox(
                                      height: 10.0,
                                    ),
                                    Row(
                                      children: <Widget>[
                                        Expanded(
                                          flex: 5,
                                          child: Text(
                                            "Description : " +
                                                "${data['data']['product']['product_long_desc']}",
                                            style: new TextStyle(
                                              fontSize: 18.0,
                                              color: Colors.black,
                                              fontWeight: FontWeight.bold,
                                            ),
                                          ),
                                        )
                                      ],
                                    ),
                                    SizedBox(
                                      height: 10.0,
                                    ),
                                    /* Row(
                          children: <Widget>[
                            Expanded(
                              flex: 7,1
                              child: Text(
                                "Price : ₹ " + data['data']['products']['price'],
                                style: new TextStyle(
                                  fontSize: 18.0,
                                  color: Colors.black,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            )
                          ],
                        ),
                        SizedBox(
                          height: 10.0,
                        ),*/
                                    Row(
                                      children: <Widget>[
                                        Text(
                                          "Quantity : ",
                                          style: new TextStyle(
                                            fontSize: 18.0,
                                            color: Colors.black,
                                            fontWeight: FontWeight.bold,
                                          ),
                                        ),
                                        new IconButton(
                                          icon: new Icon(Icons.remove),
                                          onPressed: () => setState(() {
                                            // qty = int.tryParse(qty.toString());
                                            qty--;
                                          }),
                                        ),
                                        new Text(
                                          qty.toString(),
                                          style: new TextStyle(
                                              fontSize: 15.0,
                                              fontWeight: FontWeight.bold),
                                        ),
                                        new IconButton(
                                          icon: new Icon(Icons.add),
                                          onPressed: () => setState(() {
                                            // qty = int.tryParse(qty.toString());
                                            qty++;

                                            new Text(
                                              qty.toString(),
                                              style: new TextStyle(
                                                  fontSize: 15.0,
                                                  fontWeight: FontWeight.bold),
                                            );
                                          }),
                                        ),
                                      ],
                                    ),
                                    Visibility(
                                      child: new RaisedButton(
                                          child: new Text(
                                            "Add to Cart",
                                            textAlign: TextAlign.center,
                                            style: new TextStyle(
                                                color: Colors.white,
                                                fontWeight: FontWeight.w700),
                                          ),
                                          color: Colors.lightBlue,
                                          onPressed: () {
                                            if (formKey.currentState
                                                .validate()) {
                                              formKey.currentState.save();
                                              checkproducttypeinsertproduct();
                                            } else {
                                              // validation error
                                              scaffoldkey.currentState
                                                  .showSnackBar(SnackBar(
                                                content:
                                                    Text("Failed to Add Cart"),
                                              ));
                                              setState(() {
                                                _validate = true;
                                              });
                                            }
                                          }),
                                      visible: displayaddtocart,
                                    ),
                                       new RaisedButton(
                                          child: new Text(
                                            "check varient",
                                            textAlign: TextAlign.center,
                                            style: new TextStyle(
                                                color: Colors.white,
                                                fontWeight: FontWeight.w700),
                                          ),
                                          color: Colors.lightBlue,
                                          onPressed: () {
                                            if (formKey.currentState
                                                .validate()) {
                                             // formKey.currentState.save();
                                                    
                                              checkvarient(i);
                                            } else {
                                              // validation error
                                              scaffoldkey.currentState
                                                  .showSnackBar(SnackBar(
                                                content:
                                                    Text("Failed to Add Cart"),
                                              ));
                                              setState(() {
                                                _validate = true;
                                              });
                                            }
                                          }),
                                    new RaisedButton(
                                          child: new Text(
                                            "Add to Cart",
                                            textAlign: TextAlign.center,
                                            style: new TextStyle(
                                                color: Colors.white,
                                                fontWeight: FontWeight.w700),
                                          ),
                                          color: Colors.lightBlue,
                                          onPressed: () {
                                            if (formKey.currentState
                                                .validate()) {
                                              formKey.currentState.save();
                                              checkproducttypeinsertproduct();
                                            } else {
                                              // validation error
                                              scaffoldkey.currentState
                                                  .showSnackBar(SnackBar(
                                                content:
                                                    Text("Failed to Add Cart"),
                                              ));
                                              setState(() {
                                                _validate = true;
                                              });
                                            }
                                          }),
                                  ],
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    )
                  : Column(
                     // mainAxisAlignment: MainAxisAlignment.center,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        SizedBox(height:50.0),
                        new Center(
                          child: new CircularProgressIndicator(),
                        ),
                      ],
                    );
            },
          ),
        ),
      ),
    );
  }
}
